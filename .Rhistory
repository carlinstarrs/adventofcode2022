monkeydat <- parse_monkey_input(dat)
monkey_rules <- map_dfr(monkeydat, ~.[["rules"]])
if(worry_reducer == 1){
#this would make you too worried
test_mod <- prod(as.numeric(monkey_rules$Test)) #this will make it better
}
monkey_q <- setNames(map(monkeydat, ~as.numeric(unlist(.x[["monkey_starts"]][,2]))), unique(monkey_rules$Monkey))
monkeyed_items <- setNames(as.list(rep(0, length(unique(monkey_rules$Monkey)))), unique(monkey_rules$Monkey))
take_turn <- function(item, monkey){
rule <- monkey_rules[as.numeric(monkey)+1,]
Worry_level <- floor(eval(parse(text = str_replace_all(rule$Operation, "old", as.character(item))))/worry_reducer)
if(worry_reducer == 1){
Worry_level <- Worry_level %% test_mod
}
if(Worry_level %% as.numeric(rule$Test) == 0){
monkey_q[[rule$If_true]] <<- c(monkey_q[[rule$If_true]], Worry_level)
} else {
monkey_q[[rule$If_false]] <<- c(monkey_q[[rule$If_false]], Worry_level)
}
monkeyed_items[[monkey]] <<- monkeyed_items[[monkey]] + 1
monkey_q[[monkey]] <<- monkey_q[[monkey]][-1]
}
monkeys <- as.character(rep(monkey_rules$Monkey, rounds))
walk(monkeys, function(monkey){
items <- monkey_q[[monkey]]
walk(items, ~take_turn(.x, monkey))
})
prod(sort(unlist(monkeyed_items), decreasing = TRUE)[1:2])
}
monkey_business(example)
monkey_business(input)
monkey_business(example, rounds = 100, worry_reducer = 1)
monkey_business(input, rounds = 100, worry_reducer = 1)
monkey_business(example, rounds = 10000, worry_reducer = 1)
monkey_business(input, rounds = 10000, worry_reducer = 1)
data<- readLines("day11/input.txt")
library(tidyverse)
data<- readLines("day11/input.txt")
monkey <- data[c((0:7)*7+1)]
items <- data[c((0:7)*7+2)] |>
str_trim() |>
str_remove("Starting items: ") |>
str_split(", ")
items <- lapply(items,as.numeric)
operation <- data[c((0:7)*7+3)] |>
str_trim() |>
str_remove("Operation: new = ") |>
str_split(" ")
operation_sign <- sapply(operation,"[[",2)
operation_num <- sapply(operation,"[[",3)
test <- data[c((0:7)*7+4)] |>
str_remove("Test: divisible by ") |>
as.numeric()
iftrue <- data[c((0:7)*7+5)] |>
str_remove("If true: throw to monkey ") |>
as.numeric()+1
iffalse <- data[c((0:7)*7+6)] |>
str_remove("If false: throw to monkey ") |>
as.numeric()+1
inspect = rep(0,8)
for(round in 1:20) {
for(monkey in 1:8) {
if(length(items[[monkey]])==0) {next}
for(i in 1:length(items[[monkey]])) {
# Inspect item
hold = items[[monkey]][1]
inspect[monkey] = inspect[monkey]+1
items[[monkey]] <- items[[monkey]][-c(1)]
# Update Worry
if(operation_sign[monkey] == "*") {
if(operation_num[monkey]=="old") {
hold = hold^2
} else {
hold = hold * as.numeric(operation_num[monkey])
}
}
if(operation_sign[monkey] == "+") {
hold = hold + as.numeric(operation_num[monkey])
}
# Get Bored
hold = floor(hold / 3)
# Condition
if(hold %% test[monkey] ==0) {
items[[iftrue[monkey]]] <- append(items[[iftrue[monkey]]],hold)
} else {
items[[iffalse[monkey]]] <- append(items[[iffalse[monkey]]],hold)
}
}
}
}
sort(inspect)|>rev()|>head(2)|>prod()
monkey_business(example)
monkey_business(input)
########
Input_raw <- readLines("day11/input.txt")
Input_raw |>
mutate(
monkey = ifelse(str_detect(x,"Monkey"), parse_number(x),NA),
start = ifelse(str_detect(x,"Starting items"),
str_remove(x, "Starting items:"),
NA_real_),
operation = ifelse(str_detect(x,"Operation"), str_remove(x,"Operation: "), NA),
test = ifelse(str_detect(x,"Test"), parse_number(x), NA),
next_true = ifelse(str_detect(x,"If true"), parse_number(x), NA),
next_false = ifelse(str_detect(x, "If false"), parse_number(x), NA),
x = NULL
)
########
Input_raw <- readLines("day11/input.txt")
input <- Input_raw |>
mutate(
monkey = ifelse(str_detect(x,"Monkey"), parse_number(x),NA),
start = ifelse(str_detect(x,"Starting items"),
str_remove(x, "Starting items:"),
NA_real_),
operation = ifelse(str_detect(x,"Operation"), str_remove(x,"Operation: "), NA),
test = ifelse(str_detect(x,"Test"), parse_number(x), NA),
next_true = ifelse(str_detect(x,"If true"), parse_number(x), NA),
next_false = ifelse(str_detect(x, "If false"), parse_number(x), NA),
x = NULL
) |>
fill(monkey) |>
group_by(monkey) |>
fill(everything(),.direction = "downup") |>
ungroup() |>
distinct() |>
mutate(
monkey = monkey + 1,
next_true = next_true + 1,
next_false = next_false + 1,
start = strsplit(start,",") |> map(as.numeric)
)
install.packages("aoc.elf")
input <- aoc.elf::aoc_read(day = 11, year = 2022) |>
mutate(
monkey = ifelse(str_detect(x,"Monkey"), parse_number(x),NA),
start = ifelse(str_detect(x,"Starting items"),
str_remove(x, "Starting items:"),
NA_real_),
operation = ifelse(str_detect(x,"Operation"), str_remove(x,"Operation: "), NA),
test = ifelse(str_detect(x,"Test"), parse_number(x), NA),
next_true = ifelse(str_detect(x,"If true"), parse_number(x), NA),
next_false = ifelse(str_detect(x, "If false"), parse_number(x), NA),
x = NULL
) |>
fill(monkey) |>
group_by(monkey) |>
fill(everything(),.direction = "downup") |>
ungroup() |>
distinct() |>
mutate(
monkey = monkey + 1,
next_true = next_true + 1,
next_false = next_false + 1,
start = strsplit(start,",") |> map(as.numeric)
)
aoc.elf
readLines("day11/input.txt")
remotes::install_github("tanho63/aoc.elf")+
remotes::install_github("tanho63/aoc.elf")
aoc_set_cookie(cookie = "53616c7465645f5f8fd7005038b96ba96f7371b22712faf48367e7bbed4ee069231763d600175242f6aacfb8729345530ef2a7838b940deb6da3377d947a7637")
aoc.elf::aoc_set_cookie(cookie = "53616c7465645f5f8fd7005038b96ba96f7371b22712faf48367e7bbed4ee069231763d600175242f6aacfb8729345530ef2a7838b940deb6da3377d947a7637")
aoc_set_author(author = "urmom")
aoc.elfaoc_set_author(author = "urmom")
aoc.elf::aoc_set_author(author = "urmom")
input <- aoc.elf::aoc_read(day = 11, year = 2022) |>
mutate(
monkey = ifelse(str_detect(x,"Monkey"), parse_number(x),NA),
start = ifelse(str_detect(x,"Starting items"),
str_remove(x, "Starting items:"),
NA_real_),
operation = ifelse(str_detect(x,"Operation"), str_remove(x,"Operation: "), NA),
test = ifelse(str_detect(x,"Test"), parse_number(x), NA),
next_true = ifelse(str_detect(x,"If true"), parse_number(x), NA),
next_false = ifelse(str_detect(x, "If false"), parse_number(x), NA),
x = NULL
) |>
fill(monkey) |>
group_by(monkey) |>
fill(everything(),.direction = "downup") |>
ungroup() |>
distinct() |>
mutate(
monkey = monkey + 1,
next_true = next_true + 1,
next_false = next_false + 1,
start = strsplit(start,",") |> map(as.numeric)
)
aoc.elf::aoc_read(day = 11, year = 2022)
aoc.elf::aoc_read(day = 11, year = 2022)
?aoc_read
########
# Input_raw <- readLines("day11/input.txt")
input <- aoc.elf::aoc_read(day = 11, year = 2022) |>
mutate(
monkey = ifelse(str_detect(x,"Monkey"), parse_number(x),NA),
start = ifelse(str_detect(x,"Starting items"),
str_remove(x, "Starting items:"),
NA_real_),
operation = ifelse(str_detect(x,"Operation"), str_remove(x,"Operation: "), NA),
test = ifelse(str_detect(x,"Test"), parse_number(x), NA),
next_true = ifelse(str_detect(x,"If true"), parse_number(x), NA),
next_false = ifelse(str_detect(x, "If false"), parse_number(x), NA),
x = NULL
) |>
fill(monkey) |>
group_by(monkey) |>
fill(everything(),.direction = "downup") |>
ungroup() |>
distinct() |>
mutate(
monkey = monkey + 1,
next_true = next_true + 1,
next_false = next_false + 1,
start = strsplit(start,",") |> map(as.numeric)
)
aoc.elf::aoc_read(day = 11, year = 2022) |>
mutate(
monkey = ifelse(str_detect(x,"Monkey"), parse_number(x),NA),
start = ifelse(str_detect(x,"Starting items"),
str_remove(x, "Starting items:"),
NA_real_),
operation = ifelse(str_detect(x,"Operation"), str_remove(x,"Operation: "), NA),
test = ifelse(str_detect(x,"Test"), parse_number(x), NA),
next_true = ifelse(str_detect(x,"If true"), parse_number(x), NA),
next_false = ifelse(str_detect(x, "If false"), parse_number(x), NA),
x = NULL
)
########
input <- readLines("day11/input.txt")
initial_state <- function(input) {
split(input, cumsum(grepl('Monkey', input))) |>
lapply(\(x) {
list(n_inspections = 0,
items = as.numeric(strsplit(gsub('  Starting items: ', '', x[2]), ',')[[1]]),
operation = gsub('  Operation: new = ', '', x[3]),
test = as.integer(gsub('  Test: divisible by ', '', x[4])),
true = as.integer(gsub('    If true: throw to monkey ', '', x[5])),
false = as.integer(gsub('    If false: throw to monkey ', '', x[6])))
})
}
# Part 1
state <- initial_state(input)
for (round in 1:20) {
if (round %% 50 == 0) print(round)
for (i in seq(state)) {
if (length(state[[i]]$items) > 0) {
for (j in seq(length(state[[i]]$items))) {
item = state[[i]]$items[j]
worry_level <- gsub('old', as.character(item), state[[i]]$operation) |>
parse(text = _) |>
eval()
worry_level <- worry_level %/% 3
is_divisible <- (worry_level %% state[[i]]$test) == 0
if (is_divisible) {
throw_to <- state[[i]]$true + 1
} else {
throw_to <- state[[i]]$false + 1
}
state[[throw_to]]$items <- append(state[[throw_to]]$items, worry_level)
state[[i]]$n_inspections <- state[[i]]$n_inspections + 1
}
state[[i]]$items <- NULL
}
}
}
for (round in 1:20) {
if (round %% 50 == 0) print(round)
for (i in seq(state)) {
if (length(state[[i]]$items) > 0) {
for (j in seq(length(state[[i]]$items))) {
item = state[[i]]$items[j]
worry_level <- gsub('old', as.character(item), state[[i]]$operation) |>
parse(text = _) |>
eval()
worry_level <- worry_level %/% 3
is_divisible <- (worry_level %% state[[i]]$test) == 0
if (is_divisible) {
throw_to <- state[[i]]$true + 1
} else {
throw_to <- state[[i]]$false + 1
}
state[[throw_to]]$items <- append(state[[throw_to]]$items, worry_level)
state[[i]]$n_inspections <- state[[i]]$n_inspections + 1
}
state[[i]]$items <- NULL
}
}
}
########
input <- readLines("2022/data/input11.txt")
initial_state <- function(input) {
split(input, cumsum(grepl('Monkey', input))) |>
lapply(\(x) {
list(n_inspections = 0,
items = as.numeric(strsplit(gsub('  Starting items: ', '', x[2]), ',')[[1]]),
operation = gsub('  Operation: new = ', '', x[3]),
test = as.integer(gsub('  Test: divisible by ', '', x[4])),
true = as.integer(gsub('    If true: throw to monkey ', '', x[5])),
false = as.integer(gsub('    If false: throw to monkey ', '', x[6])))
})
}
# Part 1
state <- initial_state(input)
for (round in 1:20) {
if (round %% 50 == 0) print(round)
for (i in seq(state)) {
if (length(state[[i]]$items) > 0) {
for (j in seq(length(state[[i]]$items))) {
item = state[[i]]$items[j]
worry_level <- gsub('old', as.character(item), state[[i]]$operation) |>
parse(text = .) |>
eval()
worry_level <- worry_level %/% 3
is_divisible <- (worry_level %% state[[i]]$test) == 0
if (is_divisible) {
throw_to <- state[[i]]$true + 1
} else {
throw_to <- state[[i]]$false + 1
}
state[[throw_to]]$items <- append(state[[throw_to]]$items, worry_level)
state[[i]]$n_inspections <- state[[i]]$n_inspections + 1
}
state[[i]]$items <- NULL
}
}
}
########
input <- readLines("2022/data/input11.txt")
initial_state <- function(input) {
split(input, cumsum(grepl('Monkey', input))) |>
lapply(\(x) {
list(n_inspections = 0,
items = as.numeric(strsplit(gsub('  Starting items: ', '', x[2]), ',')[[1]]),
operation = gsub('  Operation: new = ', '', x[3]),
test = as.integer(gsub('  Test: divisible by ', '', x[4])),
true = as.integer(gsub('    If true: throw to monkey ', '', x[5])),
false = as.integer(gsub('    If false: throw to monkey ', '', x[6])))
})
}
# Part 1
state <- initial_state(input)
for (round in 1:20) {
if (round %% 50 == 0) print(round)
for (i in seq(state)) {
if (length(state[[i]]$items) > 0) {
for (j in seq(length(state[[i]]$items))) {
item = state[[i]]$items[j]
worry_level <- gsub('old', as.character(item), state[[i]]$operation) %>%
parse(text = .) |>
eval()
worry_level <- worry_level %/% 3
is_divisible <- (worry_level %% state[[i]]$test) == 0
if (is_divisible) {
throw_to <- state[[i]]$true + 1
} else {
throw_to <- state[[i]]$false + 1
}
state[[throw_to]]$items <- append(state[[throw_to]]$items, worry_level)
state[[i]]$n_inspections <- state[[i]]$n_inspections + 1
}
state[[i]]$items <- NULL
}
}
}
sapply(state, \(x) x$n_inspections) |>
sort() |>
tail(2) |>
prod()
########
input <- readLines("2022/data/input11.txt")
initial_state <- function(input) {
split(input, cumsum(grepl('Monkey', input))) |>
lapply(\(x) {
list(n_inspections = 0,
items = as.numeric(strsplit(gsub('  Starting items: ', '', x[2]), ',')[[1]]),
operation = gsub('  Operation: new = ', '', x[3]),
test = as.integer(gsub('  Test: divisible by ', '', x[4])),
true = as.integer(gsub('    If true: throw to monkey ', '', x[5])),
false = as.integer(gsub('    If false: throw to monkey ', '', x[6])))
})
}
########
input <- readLines("day22/input.txt")
########
input <- readLines("day11/input.txt")
initial_state <- function(input) {
split(input, cumsum(grepl('Monkey', input))) |>
lapply(\(x) {
list(n_inspections = 0,
items = as.numeric(strsplit(gsub('  Starting items: ', '', x[2]), ',')[[1]]),
operation = gsub('  Operation: new = ', '', x[3]),
test = as.integer(gsub('  Test: divisible by ', '', x[4])),
true = as.integer(gsub('    If true: throw to monkey ', '', x[5])),
false = as.integer(gsub('    If false: throw to monkey ', '', x[6])))
})
}
# Part 1
state <- initial_state(input)
for (round in 1:20) {
if (round %% 50 == 0) print(round)
for (i in seq(state)) {
if (length(state[[i]]$items) > 0) {
for (j in seq(length(state[[i]]$items))) {
item = state[[i]]$items[j]
worry_level <- gsub('old', as.character(item), state[[i]]$operation) %>%
parse(text = .) |>
eval()
worry_level <- worry_level %/% 3
is_divisible <- (worry_level %% state[[i]]$test) == 0
if (is_divisible) {
throw_to <- state[[i]]$true + 1
} else {
throw_to <- state[[i]]$false + 1
}
state[[throw_to]]$items <- append(state[[throw_to]]$items, worry_level)
state[[i]]$n_inspections <- state[[i]]$n_inspections + 1
}
state[[i]]$items <- NULL
}
}
}
sapply(state, \(x) x$n_inspections) |>
sort() |>
tail(2) |>
prod()
# Part 2
state <- initial_state(input)
lcd <- prod(sapply(state, \(x) x$test))
for (round in seq(10000)) {
if (round %% 100 == 0) print(round)
for (i in seq(state)) {
if (length(state[[i]]$items) > 0) {
for (j in seq(length(state[[i]]$items))) {
item = state[[i]]$items[j]
worry_level <- gsub('old', as.character(item), state[[i]]$operation) %>%
parse(text = .) |>
eval()
worry_level <- worry_level %% lcd
is_divisible <- (worry_level %% state[[i]]$test) == 0
if (is_divisible) {
throw_to <- state[[i]]$true + 1
} else {
throw_to <- state[[i]]$false + 1
}
state[[throw_to]]$items <- append(state[[throw_to]]$items, worry_level)
state[[i]]$n_inspections <- state[[i]]$n_inspections + 1
}
state[[i]]$items <- NULL
}
}
}
# Part 2
state <- initial_state(input)
lcd <- prod(sapply(state, \(x) x$test))
for (round in seq(10000)) {
#if (round %% 100 == 0) print(round)
for (i in seq(state)) {
if (length(state[[i]]$items) > 0) {
for (j in seq(length(state[[i]]$items))) {
item = state[[i]]$items[j]
worry_level <- gsub('old', as.character(item), state[[i]]$operation) %>%
parse(text = .) |>
eval()
worry_level <- worry_level %% lcd
is_divisible <- (worry_level %% state[[i]]$test) == 0
if (is_divisible) {
throw_to <- state[[i]]$true + 1
} else {
throw_to <- state[[i]]$false + 1
}
state[[throw_to]]$items <- append(state[[throw_to]]$items, worry_level)
state[[i]]$n_inspections <- state[[i]]$n_inspections + 1
}
state[[i]]$items <- NULL
}
}
}
sapply(state, \(x) x$n_inspections) |>
sort() |>
tail(2) |>
prod()
# Part 2
state <- initial_state(input)
lcd <- prod(sapply(state, \(x) x$test))
for (round in seq(10000)) {
#if (round %% 100 == 0) print(round)
for (i in seq(state)) {
if (length(state[[i]]$items) > 0) {
for (j in seq(length(state[[i]]$items))) {
item = state[[i]]$items[j]
worry_level <- gsub('old', as.character(item), state[[i]]$operation) %>%
parse(text = .) |>
eval()
worry_level <- worry_level %% lcd
is_divisible <- (worry_level %% state[[i]]$test) == 0
if (is_divisible) {
throw_to <- state[[i]]$true + 1
} else {
throw_to <- state[[i]]$false + 1
}
state[[throw_to]]$items <- append(state[[throw_to]]$items, worry_level)
state[[i]]$n_inspections <- state[[i]]$n_inspections + 1
}
state[[i]]$items <- NULL
}
}
}
sapply(state, \(x) x$n_inspections) |>
sort() |>
tail(2) |>
prod()
